/**
 * a funtion that checks if the given word is in the English language,
 * the way the function determines that is, it checks if the given word
 * starts in the latin alphabat
 * @param {string} wordToCheck - the word to check
 */
export const isWordInEnglish = (wordToCheck) => {
    const firstLetter = wordToCheck.charAt(0).toLowerCase();
    return firstLetter.match(/[a-z]/i);
}

export const convertToLatin = (text) => {
    text = "[" + text.toLowerCase() + "]";
    text = replaceAll(text, "гуа", "gwa")
    text = replaceAll(text, "го", "go")
    text = replaceAll(text, "гу", "gu")
    text = replaceAll(text, "гъуа", "ğwa")
    text = replaceAll(text, "гъо", "ğo")
    text = replaceAll(text, "гъу", "ğu")
    text = replaceAll(text, "жъуа", "jwa")
    text = replaceAll(text, "жъо", "jo")
    text = replaceAll(text, "жъу", "ju")
    text = replaceAll(text, "куа", "kwa")
    text = replaceAll(text, "ко", "ko")
    text = replaceAll(text, "ку", "ku")
    text = replaceAll(text, "кӏуа", "kʼwa")
    text = replaceAll(text, "кӏо", "kʼo")
    text = replaceAll(text, "кӏу", "kʼu")
    text = replaceAll(text, "къуа", "qwa")
    text = replaceAll(text, "къо", "qo")
    text = replaceAll(text, "къу", "qu")
    text = replaceAll(text, "пӏуа", "pʼwa")
    text = replaceAll(text, "пӏо", "pʼo")
    text = replaceAll(text, "пӏу", "pʼu")
    text = replaceAll(text, "тӏуа", "tʼwa")
    text = replaceAll(text, "тӏо", "tʼo")
    text = replaceAll(text, "тӏу", "tʼu")
    text = replaceAll(text, "шӏуа", "şʼwa")
    text = replaceAll(text, "шӏо", "şʼo")
    text = replaceAll(text, "шӏу", "şʼu")
    text = replaceAll(text, "хуа", "xwa")
    text = replaceAll(text, "хо", "xo")
    text = replaceAll(text, "ху", "xu")
    text = replaceAll(text, "хъуа", "ĥwa")
    text = replaceAll(text, "хъо", "ĥo")
    text = replaceAll(text, "хъу", "ĥu")
    text = replaceAll(text, "цуа", "çwa")
    text = replaceAll(text, "цо", "ço")
    text = replaceAll(text, "цу", "çu")
    text = replaceAll(text, "шъуа", "şwa")
    text = replaceAll(text, "шъо", "şo")
    text = replaceAll(text, "шъу", "şu")
    text = replaceAll(text, "ӏуа", "ʼwa")
    text = replaceAll(text, "ӏо", "ʼo")
    text = replaceAll(text, "ӏу", "ʼu")
    text = replaceAll(text, "гъ", "ğ")
    text = replaceAll(text, "жъ", "j")
    text = replaceAll(text, "жь", "j")
    text = replaceAll(text, "къ", "q")
    text = replaceAll(text, "кӏо", "kʼo")
    text = replaceAll(text, "кӏу", "kʼu")
    text = replaceAll(text, "кӏ", "çʼ")
    text = replaceAll(text, "лъ", "ɬ")
    text = replaceAll(text, "лӏ", "ɬʼ")
    text = replaceAll(text, "хъ", "ĥ")
    text = replaceAll(text, "хь", "h")
    text = replaceAll(text, "чъ", "ç")
    text = replaceAll(text, "шъ", "ş")
    text = replaceAll(text, "ое", "waya")
    text = replaceAll(text, "ые", "ıya")
    text = replaceAll(text, "о", "wa")
    text = replaceAll(text, "уа", "wa:")
    text = replaceAll(text, "у", "w")
    text = replaceAll(text, "ы", "ı")
    text = replaceAll(text, "э", "a")
    text = replaceAll(text, "а", "a:")
    text = replaceAll(text, "б", "b")
    text = replaceAll(text, "г", "g")
    text = replaceAll(text, "д", "d")
    text = replaceAll(text, "е", "e")
    text = replaceAll(text, "ё", "yo")
    text = replaceAll(text, "ж", "j")
    text = replaceAll(text, "з", "z")
    text = replaceAll(text, "и", "i")
    text = replaceAll(text, "й", "y")
    text = replaceAll(text, "к", "k")
    text = replaceAll(text, "л", "l")
    text = replaceAll(text, "м", "m")
    text = replaceAll(text, "н", "n")
    text = replaceAll(text, "п", "p")
    text = replaceAll(text, "р", "r")
    text = replaceAll(text, "с", "s")
    text = replaceAll(text, "т", "t")
    text = replaceAll(text, "ф", "f")
    text = replaceAll(text, "х", "x")
    text = replaceAll(text, "ц", "ts")
    text = replaceAll(text, "ч", "ç")
    text = replaceAll(text, "ш", "ş")
    text = replaceAll(text, "щ", "ş")
    text = replaceAll(text, "ю", "yu")
    text = replaceAll(text, "я", "ya:")
    text = replaceAll(text, "ӏ", "ʼ")
    return text;
}

export const replaceAll = (string, search, replace) => {
    return string.split(search).join(replace);
}